/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 257:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
const focusableElList = ["a[href]", "area[href]", "button:not([disabled])", "embed", "iframe", "input:not([disabled])", "object", "select:not([disabled])", "textarea:not([disabled])", "*[tabindex]", "*[contenteditable]"];
const focusableElSelector = focusableElList.join();
function _default(el) {
  let keyboardOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let callback = arguments.length > 2 ? arguments[2] : undefined;
  if (callback) {
    const request = requestAnimationFrame(() => {
      callback(getFocusables(el, keyboardOnly));
    });
    return () => {
      cancelAnimationFrame(request);
    };
  }
  return getFocusables(el, keyboardOnly);
}
function getFocusables(el) {
  let keyboardOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let focusableEls = Array.prototype.slice.call(el.querySelectorAll(focusableElSelector));

  // filter out elements with display: none
  focusableEls = focusableEls.filter(function (focusableEl) {
    return window.getComputedStyle(focusableEl).display !== "none";
  });
  if (keyboardOnly === true) {
    focusableEls = focusableEls.filter(function (focusableEl) {
      return focusableEl.getAttribute("tabindex") !== "-1";
    });
  }
  return focusableEls;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {


var _makeupFocusables = _interopRequireDefault(__webpack_require__(257));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// REQUIRE
//const focusables = require('makeup-focusables').default;

// IMPORT

const listEl = document.getElementById("list");
const appender1 = document.getElementById("appender1");
const appender2 = document.getElementById("appender2");
const appender3 = document.getElementById("appender3");
const output = document.getElementById("output");
function onButtonClick(e) {
  e.preventDefault();
  const listItem = document.createElement("li");
  if (e.target.id === "appender1") {
    listItem.setAttribute("tabindex", "0");
  } else if (e.target.id === "appender2") {
    listItem.setAttribute("tabindex", "-1");
  } else {
    listItem.setAttribute("tabindex", "0");
    listItem.setAttribute("hidden", "hidden");
  }
  listItem.innerText = "Item ".concat(listEl.childNodes.length);
  listEl.appendChild(listItem);
  const focusableEls = (0, _makeupFocusables.default)(listEl);
  output.innerText = focusableEls.length;
}
appender1.addEventListener("click", onButtonClick);
appender2.addEventListener("click", onButtonClick);
appender3.addEventListener("click", onButtonClick);
})();

/******/ })()
;
//# sourceMappingURL=index.min.js.map